Railway Build Version 18.0
- Switched back to Dockerfile builder from Nixpacks
- Updated railway.toml to use dockerfile builder
- FIXED: Removed circular import 'from app import app' in app.py
- This was causing the FastAPI app to not be properly initialized
- Switched back to Nixpacks builder from Dockerfile
- Updated Procfile to use uvicorn with $PORT variable
- Updated railway.toml to use nixpacks builder
- Switched back to Dockerfile builder from Nixpacks
- Updated Procfile to use python app.py instead of uvicorn
- Updated railway.toml to use dockerfile builder
- Switched from Dockerfile to Nixpacks builder
- Updated Procfile to use uvicorn with $PORT variable
- Updated railway.toml to use nixpacks builder
- Changed to direct uvicorn command in Dockerfile
- Added access logging and info level logging
- Exposed both ports 8080 and 5005
- Added railway.toml configuration file
- Explicitly specified Dockerfile path in railway.json
- Added -u flag to Python command for unbuffered output
- Added debugging output to app.py startup
- Added PYTHONUNBUFFERED=1 to Dockerfile
- Fixed Railway health check path (changed from /docs to /)
- Added version info to root endpoint
- Fixed API prefix configuration (removed quotes)
- Added test endpoint (/test) for debugging
- Fixed FastAPI docs URLs (removed api_prefix)
- Added health check endpoints (/, /health)
- Fixed 404 errors by adding root endpoint
- Set ENABLE_GATEWAY=true in Dockerfile
- Set API_PREFIX= for clean URLs
- Added ua-generator module (missing dependency)
- Added curl-cffi module (missing dependency)
- Added pybase64 module (missing dependency)
- Fixed ModuleNotFoundError in Railway deployment
- Updated all requirements files
- Using requirements-server.txt (no CLI dependencies)
- Added system dependencies for compilation
- Optimized for Python 3.12
Updated: 2025-01-21
